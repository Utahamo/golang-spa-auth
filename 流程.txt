注册:
首先用户通过/register路由注册用户, 需要输入邮箱,用户名,密码(密码hash后进入数据库)
(考虑要不要存放用户的mac, ip, 地理位置等信息)

登录:
注意, 这个过程强制开启2fa认证


下一步:
用户可以注册了, 但是后端api还没有写返回2fa的qrcode的逻辑, 下一步就是接着补充handlers\
基本完成了

下一步是补充登录逻辑, 现在没有验证用户的登录信息, 也没有验证2fa的逻辑, 需要补充登录的逻辑
另外就是登陆后的状态保持, 也就是jwt的生成和验证, 这个可以放在中间件里, 也就是每次请求都要验证jwt的合法性, 如果不合法就返回401错误

细粒度控制方面，感觉可以配置用户的权限等级来实现，验证的时候用jwt的payload来验证用户的权限等级

当前SPA的数据包内容太少了，参考下面
    随机数/Nonce - 每次请求的唯一值，防止重放攻击
    用户名/访问账户 - 标识请求的用户账户
    时间戳 - 请求发送时间
    版本号 - SPA协议版本
    消息类型 - 表明请求的操作类型(如开放端口、关闭防火墙规则等)
    请求内容 - 具体要访问的服务/端口/协议
    源IP地址 - 客户端实际IP或NAT后IP
    目标IP地址 - 目标服务器IP
    加密方式标识 - 使用的加密算法
    HMAC/数字签名 - 验证数据完整性和来源
    数据包序列号 - 在多包模式下使用
    访问持续时间 - 请求的访问时长
    GPG/加密层 - 外层加密封装

我这里可以加上
    随机Nonce - 与时间戳配合，更有效防止重放攻击
    协议版本号 - 便于未来协议升级和兼容性管理
    请求类型 - 允许客户端指定需要访问的具体服务
    加密层 - 对整个数据包进行加密而非仅依赖签名验证
    请求有效期 - 客户端请求的端口开放时长
    访问来源 - 记录发起请求的应用或设备信息


利用https://github.com/emmansun/gmsm
可以添加上国密sm的部分，将其加上后，可以扩充很多内容